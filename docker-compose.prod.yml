# syntax=docker/dockerfile:1.7

# Production environment overrides
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
# Contains production-specific configuration that extends docker-compose.yml

services:
  postgres:
    env_file:
      - config/prod.env
    # No runtime overrides necessary; use defaults from common.env (POSTGRES_DB=app)
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backend:
    build:
      dockerfile: docker/production/backend.Dockerfile
    env_file:
      - config/prod.env
    environment:
      # Production-specific runtime config
      - ALLOWED_ORIGINS_STR=${ALLOWED_ORIGINS_STR}
      - LLM_PROVIDER=${LLM_PROVIDER:-bedrock}
      - BEDROCK_REGION=${BEDROCK_REGION:-us-east-1}
      - BEDROCK_MODEL=${BEDROCK_MODEL}
      - ENVIRONMENT=production
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  frontend:
    build:
      dockerfile: docker/production/frontend.Dockerfile
    environment:
      - VITE_API_URL=${VITE_API_URL:-https://localhost}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    # Production Redis configuration
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  worker:
    build:
      context: .
      dockerfile: docker/production/backend.Dockerfile
    command: /start-celeryworker.sh
    env_file:
      - config/common.env
      - config/prod.env
    secrets:
      - postgres_password
      - secret_key
      - session_secret_key
      - openai_api_key
      - openrouter_api_key
      - aws_access_key_id
      - aws_secret_access_key
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped

  reverse-proxy:
    image: nginx:alpine
    container_name: reverse_proxy_prod
    ports:
      - "443:443"
    volumes:
      - ./docker/production/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/production/reverse-proxy/certs:/etc/nginx/certs
      - ./logs:/app/logs
    depends_on:
      - frontend
      - backend
    networks:
      - default

networks:
  default:
    name: Reactrine-prod-network
